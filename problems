// making a string to integer by using option
def toInt(s: String) :Option[Int] ={
  try {
    Some(Integer.parseInt(s.trim))
      } catch {
      case e: Exception => None    }
}

val numpattern = "[0-9]+".r
val address = "123 main street suite 101"
val match1 = numpattern.findFirstIn(address)

//returns option,(Some(value) and None in-case of no match)
match1 match {
  case Some(s) => println(s"Found: $s")
  case None => println("found None")
}
println(match1.getOrElse(0))

//findAllIn returns an non-empty iterator and returns empty iterator in case of no match
val matches = numpattern.findAllIn(address).toArray
//matches.foreach(println)

// list containing of strings
val bag = List("1","2","foo","3","bar")
bag.map(toInt).foreach(println)

//o/p->Some(1)Some(2)NoneSome(3)None

//by using flatMap, we get flattened results by eliminating the Null(None) values
//o/p-> 123

#Use zipWithIndex wen iteraing over a list and in need of counter
val days = Array("Sun", "Mon", "Tue")
days.zipWithIndex.foreach {  case(day,count) => println(s"$count is $day")}
days.zipWithIndex.foreach(println)
//o/p-> (Sun,0)(Mon,1)(Tue,2)
#####
def divideXByY(x : Int, y : Int) : Option[Int] = {  
try{    
  Some(x/y)
   } catch {
  case e: Exception => None
   }
 }
divideXByY(1,0) match{
  case Some(i) => println(s"found and is $i")
  case None => println("Dude we can't divide")
 }
#####
import scala.util.Random
//apply function creates object with arguments and unapply function gives arguments from object
object Customer {
  def apply(name: String) = s"$name--${Random.nextLong}"
  def unapply(customer: String): Option[String] = {
    val name = customer.split("--").head
    if(name.nonEmpty) Some(name) else None
  }
}

val Customer1 = Customer("Ravi")
val Customer2 = Customer("Teja")
Customer1 match {
  case Customer(s) => println(s"found: $s")
  case _  => println("couldn't extract customer")
}
//o/p->found: Ravi
val customers: List[String] = List(Customer1,Customer2)
//customers:+Customer3
customers.foreach(println)
o/p->
Ravi--4721392806383845516
Teja--8338935503458781645
#######
//Function with Option asone of its parameter,it gives efficient results than with default parameter for arguments
//Here None is given as default parameter for Option
//In the case of Some(coupon), we assume a database lookup for the discount that needs to be applied.But, in our example, we will assume the discount is 10%
def itemTotalCost(itemName: String, itemQuantity: Int, couponCode: Option[String]=None): Double = {
couponCode match {
  case Some(coupon) =>
  val discount = 0.1
  val totalCost = 2.50 * itemQuantity * (1 - discount)
  totalCost
  case _ => 2.50 * itemQuantity
  
 }  
}

val howMuch = itemTotalCost("Donut",20,Some("12345"))
println(s"please pay ${howMuch.toFloat}")
o/p --> please pay 45 //for couponCode
o/p --> please pay 50 // no coupon ..i.e., None is taken as default , so _ is taken @pattern match
