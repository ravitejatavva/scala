linear recursive function, that calculates sum of two variables for a function f
def sum(f: Int => Int, a: Int, b: Int): Int = {
     |   if(a>b) 0
     |   else f(a) + sum(f,a+1,b)
     | }
sum: (f: Int => Int, a: Int, b: Int)Int

for ex: def sumInts(a: Int, b: Int) = sum(x => x,a,b)
        def sumCubes(a: Int, b: Int) = sum(x => x*x*x,a,b)
        
As, we are passing the same parameters a,b to sum fn from sumInts,sumCubes.... 
there is a redundancy of code...how can we overcome that???????

sum fn returns another fn by applying function f
def sum(f: Int => Int): (Int,Int) => Int = {
     |   def sumF(a:Int, b: Int): Int = {
     |     if(a > b) 0
     |     else f(a) + sumF(a+1,b)
     |   }
     |  sumF
     | }
sum: (f: Int => Int)(Int, Int) => Int

>>>  def sumInts = sum(x => x)
sumInts: (Int, Int) => Int

scala> sumInts(3,5)
res0: Int = 12

We do have similar constructs in scala, which is called fn currying
def product(f: Int => Int)(a: Int,b: Int): Int = {
     |   if(a > b) 1
     |   else f(a) * product(f)(a+1,b)
     | }
product: (f: Int => Int)(a: Int, b: Int)Int

resultType of Product becomes fn type of prod type

def prod = product(x=>x)(_,_)
prod: (Int, Int) => Int

Factorial in terms of product..isn't that interesting... oh ya!!!!!!
def fact(n: Int) = product(x=>x)(1,n)
fact: (n: Int)Int

Can we generalize code for sum and product as well...?? Here u go!!!!
******************************        MAP     REDUCE        ************************************
def mapReduce(f: Int => Int)(combine: (Int,Int) => Int, zero: Int)(a: Int,b: Int): Int = {
     |    if(a>b) zero
     |    else combine(f(a),mapReduce(f)(combine,zero)(a+1,b))
     | }
mapReduce: (f: Int => Int)(combine: (Int, Int) => Int, zero: Int)(a: Int, b: Int)Int

def sum_reduce = mapReduce(x =>x)((x: Int,y: Int) => x+y,0)(_,_)
sum_reduce: (Int, Int) => Int

product in terms of mapReduce..how can we do that...............????????

def product(f: Int => Int)(a: Int,b: Int): Int = mapReduce(f)((x,y) => x*y,1)(a,b)
product: (f: Int => Int)(a: Int, b: Int)Int
********************************* Reduce ************************************
def re(combine: (Int,Int)=>  Int, zero: Int)(a: Int,b: Int): Int = {
     |    if(a>b) zero
     |    else combine(a,re(combine,zero)(a+1,b))
     | }
re: (combine: (Int, Int) => Int, zero: Int)(a: Int, b: Int)Int

scala> re((x,y) => x+y,0)(1,5)
res17: Int = 15

mappreduce is defined, reduce is defined and what about fold dude...??? how are going to acheive this???????
def fo(zero: Int)(combine: (Int,Int) => Int)(a: Int,b: Int): Int = {
     |   if(a>b) zero
     |   else combine(a,fo(zero)(combine)(a+1,b))
     | }
fo: (zero: Int)(combine: (Int, Int) => Int)(a: Int, b: Int)Int

scala> fo(0)((x,y) => x+y)(1,5)
res18: Int = 15

factorial interms of fold....heheheheh......gotcha...:p

def fact(n: Int) = fo(1)((x,y) => x*y)(1,n)
fact: (n: Int)Int

val fact_of_10 = fact(5)
fact_of_10: Int = 120

I came a long a way to gv u feast..:D.. isn't your appettite full.. Strong No!!...:D brought agg to our bag!!!

scala> def ag(zero: Int)(combOps: (Int,Int) => Int)(reduceOps: (Int,Int) => Int)(a: Int,b: Int): Int = {
     |   if(a>b) zero
     |   else combOps(a, ag(zero)(combOps)(reduceOps)(a+1,b))
     | }
ag: (zero: Int)(combOps: (Int, Int) => Int)(reduceOps: (Int, Int) => Int)(a: Int, b: Int)Int

scala> ag(0)((a,b) => a+b)((a,b) => if(a>b) a else b)(1,10)
res2: Int = 55

scala> ag(100)((a,b) => a+b)((a,b) => if(a>b) a else b)(1,10)
res3: Int = 155


