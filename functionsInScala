#################
function that returns Option
def dailyCouponCodeDb() : Option[String] = {
  //db lookUp
  val couponFromDB = "coupon1234"
  Option(couponFromDB).filter(_.nonEmpty)
}

val couponLuck = dailyCouponCodeDb.getOrElse("Boss! No coupons Today. Better Luck next time")
println(couponLuck)
dailyCouponCodeDb() match {
  case Some(couponCode) => println(s"Boss U got a coupon.. Here u Go ${couponCode.toFloat}")
  case None => println("Boss! No coupons Today. Better Luck next time")
}
//If you are interested in valid values, then u can go with map/flatMap
dailyCouponCodeDb().map(couponcode => println(s"Boss U got a coupon.. Here u Go ${couponcode.toFloat}"))

val howMuch = itemTotalCost("Donut",20,dailyCouponCodeDb())
println(s"please pay ${howMuch.toFloat})

#######
//implicit arguments passed to a function
def itemTotalCost(itemName : String, itemQuantity : Int, couponCode : Option[String]= None)(implicit discount: Double,storeName: String): Double = {
  couponCode match {
    case Some(coupon) => 
    // if we specify discount inside function, it is overridden!!
    //val discount = 0.1  //--> we can make it implicit so that we can get it from outside
    println(s"please pay for $itemQuantity $itemName to $storeName")
    val totalCost = 2.5 * itemQuantity * (1 - discount)
    totalCost
    case _ => 2.5 * itemQuantity
  }
}

implicit val discount = 0.1
implicit val storeName = "walmart"
val howMuchhv2Pay = itemTotalCost("Donut", 50, dailyCouponCodeDb())
println(s"please pay ${howMuchhv2Pay.toFloat}")


//polymorphic function with generic types
def applyDiscount[T](discount: T) : Seq[T] = {
  discount match {
    case s : String =>
    println(s"you got a discountcoupon ${discount} please apply and get discount")
    Seq[T](discount)
    
    case d : Double =>
    println(s" discount of ${discount}% applied")
    Seq[T](discount)
    
    case d @ _  => println(" Unsupported-type function")
    Seq[T](discount)
  }
}

println(s"Result of applyDiscount with String parameter = ${applyDiscount[Double](3)}")


+++++++++++++++++++++++++++++function with variable arguments(varargs*)++++++++++++++++++++++++
def printReport(names : String*) = {
  println(s"Donut report = ${names.mkString(", ")}")
}

printReport("choc-donut","vanilla-donut","straw-donut")
val donut_list : List[String] = List("choc-donut","vanilla-donut","straw-donut")
printReport(donut_list:_*) // :_* --> needs to be specified when varargs* passed in form of List, Seq & Array otherwise compiler error!
// :_* --> is called type ascription


+++++++++++++++++++++++++++++++++++++++ args unpacking ++++++++++++++++++++++++++++++++++++++++++
def sum(xs: Int*) = (0 /: xs) ((x, y) => x + y) --> 0 /: argument unpacking and with initialisation
sum(1, 2, 3, 4)
sum(List(1, 2, 3, 4): _*) --> compiler error //type ascription

+++++++++++++++++++++++++++++++++++++++ functionWithSymbols ++++++++++++++++++++++++++++++++++++++
function with symbols, needs to be careful while defining and calling!!
class donutCalculator {
  val totalCost = 100
  
  def ---(discount: Double): Double = {
    totalCost - discount
  }
}

val doNutCalculator = new donutCalculator()
println(doNutCalculator.---(10))


+++++++++++++++++++++++++++++++++++++++++ function currying +++++++++++++++++++++++++++++++++++++++++
//partial functions they came from the concept of function currying 
def totalCost(itemName: String)(itemQuantity: Int)(discount: Double): Double = {
  val totalcost = 2.5 * itemQuantity
  totalcost * (1 - discount)
}

val gazeddounuts = totalCost("GazedDounts")_// this is a partial function got from a Curried function
val gazeddountsWithQuantity = totalCost("GazedDounts")(20)_ //partial function got thru concept of function currying
println(gazeddounuts) //o/p ---> <function1>
println(gazeddountsWithQuantity) //o/p ---> <function1>
println(s" gazed dounts cost is ${gazeddounuts(10)(0.1)}") //o/p  ---> gazed dounts cost is 22.5
println(s" gazed dounts cost is ${gazeddountsWithQuantity(0.1)}") //o/p ---> gazed dounts cost is 22.5

++++++++++++++++++++++++++++ function currying with anonymous function +++++++++++++++++++++++++++++++++
def donutbounty(itemName: String,itemQuantity : Int)(f: Double => Double): Double = {
  val totalCost = 2.5 * itemQuantity
  f(totalCost)
}

val howMuch = donutbounty("donut", 20){totalcost =>
  val discount = 0.2 //Db lookUp
  totalcost * (1 - discount)
 }
println(s"total cost of 20 donuts with anonymous function is ${howMuch.toFloat}")

//passing function as parameter to the higher order function
def applydiscount(totalCost: Double) : Double = {
  val discount = 2
  totalCost * (1 - discount)
}
println(s"please pay ${totalCostWithDisc("chocDonut")(25)(applydiscount(_))}")

******************************************************************************
////call-by-name////
//case class Order(ItemName: String, ItemQuantity: Int, ItemPrice: Double)

val Orders  = List(("choc-Donut", 2 , "2.50"), ("vanilla-Donut", 5 , "1.50"), ("straw-Donut", 3 , "3.50"))
def placeOrder(orders: List[(String, Int, Double)])(exchangeRate: Double) : Double = {
  var totalCost = 0.0
  orders.foreach {order =>
// val costOfItem = order.ItemQuantity * order.ItemPrice * exchangeRate
    val costOfItem = order._2 * order._3 * exchangeRate
    println(" cost of ${order.2} ${order._1} is $costOfItem")
    totalCost += costOfItem
  }
  totalCost
}

//val howMuch = placeOrder(Orders)(0.165)
//println(s"please pay ${howMuch.toFloat} to cashier")
//exchange rate shudn't be a hardcoded value and we need to pass function with call -by -name parameter
println(s"Total cost of order = £${placeOrder(Orders)(0.5)}")
+++++++++++++++++++++++++++++higherOrderFunction(call-by-name)+++++++++++++++++++++++++++++++++
import scala.util.Random
//case class Order(ItemName: String, ItemQuantity: Int, ItemPrice: Double)
val Orders  = List(("choc-Donut", 2 , "2.50"), ("vanilla-Donut", 5 , "1.50"), ("straw-Donut", 3 , "3.50"))
def placeOrder(orders: List[(String, Int, Double)])(exchangeRate: => Double) : Double = {
  var totalCost = 0.0
  orders.foreach {order =>
// val costOfItem = order.ItemQuantity * order.ItemPrice * exchangeRate
    val costOfItem = order._2 * order._3 * exchangeRate
    println(" cost of ${order.2} ${order._1} is $costOfItem")
    totalCost += costOfItem
  }
  totalCost
}
exchange rate shudn't be a hardcoded value and we need to pass function with call -by -name parameter and is calculated based on stock value..
val randomExchangeRate = new Random(10)
def usdToGbp: Double = {
  val rate = randomExchangeRate.nextDouble()
  println(s"exchange rate for usdToGbp is $rate")
  rate
}

println(s"please pay ${placeOrder(Orders)(usdToGbp)}")

++++++++++++++++++++++++++++++++++++ functionWithCallbackParameter +++++++++++++++++++++++++++

def printReportWithOptionCallback(sendEmailCallback: Option[() => Unit] = None) {
  println("Printing report ... started")
  // look up some data in database and create a report
  println("Printing report ... finished")
  sendEmailCallback.map(callback => callback())
  
}
printReportWithOptionCallback()

//Val functions inherit the andThen function and we will show how to use the andThen function to compose two functions together.
•Ordering using andThen: f(x) andThen g(x) = g(f(x))
•Ordering using compose: f(x) compose g(x) = f(g(x))

//Mathematically speaking, f(x) andThen g(x) = g(f(x)). The results of the first function f(x) is ran first and will be passed as input to the second function g(x).


val totalCost: Double = 10

val applyTaxValFunction = (amount: Double) => {
  println("Apply tax function")
  val tax = 1 // fetch tax from database
  amount + tax
}


val applyDiscountValFunction = (amount: Double) => {
  println("Apply discount function")
  val discount = 2 // fetch discount from database
  amount - discount
}
println(s" ${((applyDiscountValFunction andThen applyTaxValFunction)(totalCost))}") // •Ordering using andThen: f(x) andThen g(x) = g(f(x))
println(s" ${((applyDiscountValFunction compose applyTaxValFunction)(totalCost))}") •Ordering using compose: f(x) compose g(x) = f(g(x))

+++++++++++++++++++++++++++++++partial functions can be made using pattern matching+++++++++++++++++++++++++++++
val donut = "Glazed Donut"

val tasteLevel = donut match {
  
  case "Glazed Donut" | "Straw-Donut" => "very Taste"
  
  case "choc Donut " => "Yummy"
  
  case _ => " Tasty "
}

println(s" donut is $donut and it is ${tasteLevel} ")

//•Note that we are using the PartialFunction trait
//•In this example isVeryTasty takes an input of type String which is the donut and produces a String for the taste level. This is specified by PartialFunction[String, String]


val isVeryTasty : PartialFunction[String,String] = {
  
  case "Glazed Donut" | "Straw-Donut" => "very Taste"
}

println(s"Calling partial function isVeryTasty = ${isVeryTasty("Glazed Donut")}")

// Let's go ahead and use the orElse() function which is inherited from the PartialFunction trait and create another PartialFunction named donutTaste


++++++++++++++++++++++++++++++++++++++++ nested Function ++++++++++++++++++++++++++++++++++++++++++++++
def checkDonutAvailabilityWithNestedFunction(donutName: String): Boolean = {
  // retrieve donut list that is currently in stock
  val listDonutsFromStock = List[String]("Vanilla Donut", "Strawberry Donut", "Plain Donut", "Glazed Donut")

  // validate the donutName parameter by some business logic
  val validate = (name: String) => {
    name.nonEmpty && name.length > 0
  }

  // first run validate and then check if we have a matching donut from our list
  val isDonutInStock = validate(donutName) && (listDonutsFromStock contains donutName)

  isDonutInStock
}

println(s" is that available ?? ${checkDonutAvailabilityWithNestedFunction("Vanilla Donut")}" )

o/p --> is that available ?? true
