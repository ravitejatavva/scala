@scala.annotation.tailrec
def factorial(fact: BigInt, n: BigInt) : BigInt = {
  if(n == BigInt(1))
    fact
  else
    1 * factorial(fact * n, n-1)
}

println(factorial(500))

write as a recursive procedure
and run it as a iterative process
//procedure is code we write and process is the code that runs, and complier 
uses git optimisation
tail call optimisation


SICP --> structured and iterative programming
recursive(write as a recursive procedure) --> iterative(run it as a process)

#anonymous classes
def createPerson() = {
  new {
    var first = "James"
    var last = "Bond"
  }
}

var double0Seven = createPerson()
println(double0Seven)


trait friend {
    val name: String 
    def listen = println(s" i am $name listening..")
}

class Human(val name: String) extends friend
class Animal(val name: String)

class Dog(override val name: String) extends Animal(name) with friend

class Cat(override val name: String) extends Animal(name)

val sam = new Human("Sam")
sam.listen

val buddy = new Dog("Buddy")
buddy.listen

val alf = new Cat("Alf") with friend
alf.listen

def talkTo(frnd: friend) = frnd.listen

talkTo(sam)
talkTo(buddy)
