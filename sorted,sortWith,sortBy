<<<<<Description>>>>>
//we have sorted,sortBy and sortWith functions to create customised ordering
1)sorted
2)sortBy
sortBy has implicit parameter ord which provides ordering
def sortBy [B] (f: (A) â‡’ B)(implicit ord: Ordering[B]): List[A]

3)sortWith
we can create our own function and can be passed into sortWith

val a = List(10,5,8,2,3).sorted()

val b = List(10,5,8,2,3).sortBy(x => -x) //descending and --->sortBy(x => x) //ascending
val b = List(10,5,8,2,3).sortBy(-_) //descending and --->sortBy(_) // ascending

val bstring = List("apple","bat","cars").sortBy(x => -x.size)
o/p -> List(apple, cars, bat)

case class Foo(time:Long, str:String)
val l = List(Foo(1, "hi"), Foo(2, "a"), Foo(3, "X"))

l.sortWith(_.time > _.time).foreach(println)    // List(Foo(3,X), Foo(2,a), Foo(1,hi))
l.sortBy(- _.time)                              // List(Foo(3,X), Foo(2,a), Foo(1,hi))
l.sortBy(_.time)                                // List(Foo(1,hi), Foo(2,a), Foo(3,X))

val list = List(2, 5, 3, 1)
list.sortWith(_>_) -> res14: List[Int] = List(5, 3, 2, 1)

val listA = List("banana","apple","Orange")
listA.sortWith(_.length > _.length).foreach(println)

def sortBylength(s1: String, s2: String): Boolean ={
println("comparing %s and %s".format(s1,s2))
s1.length > s2.length
}
val listA = List("banana","apple","Orange").sortWith(sortBylength).foreach(println)

