**Pattern Natural Numbers**
def chessBoard(count: Int): Image = {
     |   val blackSquare = Image.rectangle(10,10).fillColor(Color.black)
     |   val redSquare = Image.rectangle(10,10).fillColor(Color.red)
     |   val base = (redSquare beside blackSquare) above (blackSquare beside redSquare)
     |   count match {
     |     case 0 => base
     |     case n =>
     |       val unit = chessBoard(n-1)
     |       (unit beside unit) above (unit beside unit)
     |   }
     | }

CrossCircles...
def cross(count: Int): Image = {
     |     val unit= Image.circle(20)
     |     count match {
     |       case 0 => unit
     |       case n => unit beside ( unit above cross(n-1) above unit ) beside unit
     |     }
     | }
     
     
Sierpinski triangle...
 def sierpinski(count: Int): Image = {
     |   val triangle = Image.triangle(10,10) lineColor Color.magenta
     |   count match {
     |     case 0 => triangle above (triangle beside triangle)
     |     case n =>
     |       val unit = sierpinski(n-1)
     |       unit above (unit beside unit)
     |   }
     | }


identity element using structural recursion...
 def identity(n: Int): Int = {
     |   n match {
     |     case 0 => 0
     |     case n => 1 + identity(n-1)
     |   }
     | }

double the same element using structural recursion...
 def double(n: Int): Int = {
     |   n match {
     |    case 0 => 0
     |    case n => 2 + double(n-1)
     |   }
     | }

Growing Boxes...
 def growingSize(n: Int): Image = {
     |   n match {
     |     case 0 => Image.Empty
     |     case n => growingSize(n-1) beside Image.rectangle(n*10,n*10)
     |   }
     | }


