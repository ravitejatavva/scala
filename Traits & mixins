//trait are like by one and get one offer
//if you use a trait.. u get a interface and class rightway

trait Friend{
  val name: String
  def listen() = println(s"I'm $name listening...")
}

trait Curious {
  def pokeAround() = { println(s"..curious...") }
}

class Human(val name: String) extends Friend

class Animal(val name: String)

class Dog(override val name: String) extends Animal(name) with Friend with Curious
class Cat(override val name: String) extends Animal(name)

def seekHelpFrom(friend: Friend) = friend.listen

val sam = new Human(" Sam ")
seekHelpFrom(sam)

//javap Friend.class

val buddy = new Dog(" Buddy ")
seekHelpFrom(buddy)

val alf = new Cat(" Alf ")
seekHelpFrom(alf)

//Traits at instance level
val rebecca = new Cat("Rebecca") with Friend
seekHelpFrom(rebecca)
println(rebecca.getClass)
buddy.pokeAround


//What happens if we have common methods in multiple traits.. instead of colliding in case of class.. 
what if want to collaborate with traits.. isn't it interesting??

