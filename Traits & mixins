//trait are like by one and get one offer
//if you use a trait.. u get a interface and abstract class rightway..
//trait is a combination of interface and abstract base class. where interface implementations happen and delegations.
//trait provides chainability, is nothing but decorator pattern.

trait Friend {
  val name: String
  def listen() = println(s"I'm $name listening...")
}

trait Curious {
  def pokeAround() = { println(s"..curious...") }
}

class Human(val name: String) extends Friend

class Animal(val name: String)

class Dog(override val name: String) extends Animal(name) with Friend with Curious
class Cat(override val name: String) extends Animal(name)

def seekHelpFrom(friend: Friend) = friend.listen

val sam = new Human(" Sam ")
seekHelpFrom(sam)

//javap Friend.class

val buddy = new Dog(" Buddy ")
seekHelpFrom(buddy)

val alf = new Cat(" Alf ")
seekHelpFrom(alf)

//Traits at instance level
val rebecca = new Cat("Rebecca") with Friend
seekHelpFrom(rebecca)
println(rebecca.getClass)
buddy.pokeAround

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Chaining >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//What happens if we have common methods in multiple traits.. instead of colliding in case of class.. 
what if want to collaborate with traits.. isn't it interesting??

abstract class Writer {
  def write(msg: String)
}

// think extends as constraint u r keeping on Writer, as we want trait to work only with Writer.
extends ~~ constraint

trait UppercaseFilter extends Writer {
  abstract override def write(msg: String) = {
    super.write(msg.toUpperCase())
  }
}

trait ProfanityFilter extends Writer {
  abstract override def write(msg: String) = {
    super.write(msg.replace("stupid", "s******"))
  }
}

// write in trait is same as write as in Writer(abstract)--> override
//super means go and call a method to its left..
//abstract, here says next guy in the chain is going to have this method
//traits call from right to left
//traits form horizontal hierarchy --> chaining
//classes form vertical hierarchy  --> inheritance


class StringWriter extends Writer {
  val target = new StringBuilder
  override def toString() = target.toString
  
  override def write(msg: String) = target.append(msg)
}

def writeStuff(writer: Writer) = {
  writer.write("This is stupid")
  println(writer)
}

writeStuff(new StringWriter)
writeStuff(new StringWriter with UppercaseFilter)
writeStuff(new StringWriter with UppercaseFilter)
writeStuff(new StringWriter with UppercaseFilter with ProfanityFilter)
writeStuff(new StringWriter with ProfanityFilter with UppercaseFilter)

o/p
This is stupid
This is s******
THIS IS STUPID
THIS IS S******
THIS IS STUPID

//////////////////////////////////////////////////////////////////////////////////////////
traits are compile time mixins 
mixins are run time mixins
